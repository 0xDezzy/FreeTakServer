#######################################################
# 
# Event.py
# Python implementation of the Class Event
# Generated by Enterprise Architect
# Created on:      11-Feb-2020 11:08:07 AM
# Original author: Corvo
# 
#######################################################
from TAKfreeServer.Model.point import point
from TAKfreeServer.Model.detail import detail

class Event:
    """represents a TAK event: this class is instantiated with a standard set of
    values.
    """
# default constructor       def __init__(self):  

    m_point = "point()" 
     # m_point getter 
     def getm_point(self): 
      return self.m_point 
 
     # m_point setter 
     def setm_point(m_point=0):  
     self.m_point=m_point 
 
    m_detail = "detail()" 
     # m_detail getter 
     def getm_detail(self): 
      return self.m_detail 
 
     # m_detail setter 
     def setm_detail(m_detail=0):  
     self.m_detail=m_detail 
 
    # Gives a hint about how the coordinates were generated
    how = "m-g" 
     # how getter 
     def gethow(self): 
      return self.how 
 
     # how setter 
     def sethow(how=0):  
     self.how=how 
 
    # Schema version of this event instance (e.g. 2.0)
    version = "2.0" 
     # version getter 
     def getversion(self): 
      return self.version 
 
     # version setter 
     def setversion(version=0):  
     self.version=version 
 
    # time stamp: when the event was generated
    time = "%Y-%m-%dT%H:%M:%SZ" 
     # time getter 
     def gettime(self): 
      return self.time 
 
     # time setter 
     def settime(time=0):  
     self.time=time 
 
    # <font color="#008000">Hierarchically organized hint about event type</font>
    type = "a-h-G-E-V" 
     # type getter 
     def gettype(self): 
      return self.type 
 
     # type setter 
     def settype(type=0):  
     self.type=type 
 
    # ending time when an event should no longer be considered valid
    stale = "%Y-%m-%dT%H:%M:%SZ" 
     # stale getter 
     def getstale(self): 
      return self.stale 
 
     # stale setter 
     def setstale(stale=0):  
     self.stale=stale 
 
    # Globally unique name for this information on this event
    uid = "UIDString" 
     # uid getter 
     def getuid(self): 
      return self.uid 
 
     # uid setter 
     def setuid(uid=0):  
     self.uid=uid 
 
    # starting time when an event  should be considered valid
    Start = "%Y-%m-%dT%H:%M:%SZ" 
     # Start getter 
     def getStart(self): 
      return self.Start 
 
     # Start setter 
     def setStart(Start=0):  
     self.Start=Start 
     