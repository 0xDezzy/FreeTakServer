#######################################################
# 
# ClientReceptionHandler.py
# Python implementation of the Class ClientReceptionHandler
# Generated by Enterprise Architect
# Created on:      19-May-2020 7:17:21 PM
# Original author: Natha Paquette
# 
#######################################################
import time
from xml.dom.minidom import parseString
import threading
from queue import Queue
from logging.handlers import RotatingFileHandler
import logging
import sys

from configuration.ClientReceptionLoggingConstants import ClientReceptionLoggingConstants
loggingConstants = ClientReceptionLoggingConstants()
#TODO: add more rigid exception management

class ClientReceptionHandler:
    def __init__(self):
        self.dataPipe = ''
        self.eventPipe = ''
        self.threadDict = {}
        self.dataArray = []
        self.logger = logging.getLogger(__name__)

    def startup(self, dataPipe, eventPipe):
        try:
            self.dataPipe = dataPipe
            self.eventPipe = eventPipe
            threading.Thread(target=self.monitorEventPipe, args=(), daemon=True).start()
            threading.Thread(target=self.returnDataToOrchestrator, args=(), daemon=True).start()
            self.logger.propagate = False
            self.logger.info(loggingConstants.CLIENTRECEPTIONHANDLERSTART)
            self.logger.propagate = True
            while True:
                time.sleep(120)
                self.logger.info('the number of threads is ')
        except Exception as e:
            self.logger.error(loggingConstants.CLIENTRECEPTIONHANDLERSTARTUPERROR+str(e))

    def monitorEventPipe(self):
        while True:
            try:
                while self.eventPipe.poll():
                    command = self.eventPipe.recv()
                    if command[0] == loggingConstants.CREATE:
                        self.createClientMonitor(command[1])
                    elif command[0] == loggingConstants.DESTROY:
                        self.destroyClientMonitor(command[1])
            except Exception as e:
                self.logger.error(loggingConstants.CLIENTRECEPTIONHANDLERMONITOREVENTPIPEERROR+str(e))

    def returnDataToOrchestrator(self):
        while True:
            try:
                while len(self.dataArray)>0:
                    value = self.dataArray.pop(0)
                    self.dataPipe.send(value)
            except Exception as e:
                self.logger.error(loggingConstants.CLIENTRECEPTIONHANDLERRETURNDATATOORCHESTRATORERROR+str(e))

    def createClientMonitor(self, clientInformation):
        try:
            alive = threading.Event()
            alive.set()
            clientMonitorThread = threading.Thread(target=self.monitorForData, args = (clientInformation, alive), daemon=True)
            clientMonitorThread.start()
            self.threadDict[clientInformation.ID] = [clientMonitorThread, alive]
            self.logger.info(loggingConstants.CLIENTRECEPTIONHANDLERCREATECLIENTMONITORINFO)
        except Exception as e:
            self.logger.error(loggingConstants.CLIENTRECEPTIONHANDLERCREATECLIENTMONITORERROR+str(e))

    def destroyClientMonitor(self, clientInformation):
        try:

            thread = self.threadDict.pop(clientInformation.clientInformation.ID)
            self.logger.info(thread)
            thread[1].clear()
            thread[0].join()
            self.logger.info(loggingConstants.CLIENTRECEPTIONHANDLERDESTROYCLIENTMONITORINFO)
        except Exception as e:
            self.logger.error(loggingConstants.CLIENTRECEPTIONHANDLERDESTROYCLIENTMONITORERROR+str(e))

    def monitorForData(self, clientInformation, alive):
        '''
        updated receive all 
        '''
        try:
            try:                
                BUFF_SIZE = 8087
                client = clientInformation.socket
                data = b''
            except Exception as e:
                self.logger.error(loggingConstants.CLIENTRECEPTIONHANDLERMONITORFORDATAERRORA+str(e))
                self.returnReceivedData(clientInformation, b'')
            while alive.isSet():
                try:
                    part = client.recv(BUFF_SIZE)
                except OSError as e:
                    self.logger.error(loggingConstants.CLIENTRECEPTIONHANDLERMONITORFORDATAERRORB+str(e))
                    self.returnReceivedData(clientInformation, b'')
                    break
                try:
                    if part == b'' or part == None:
                        self.returnReceivedData(clientInformation, b'')
                        break
                    elif len(part) < BUFF_SIZE:
                        # either 0 or end of data
                        data += part 
                        self.returnReceivedData(clientInformation, data)
                        data = b''
                    else:
                        data += part
                except Exception as e:
                    self.logger.error(loggingConstants.CLIENTRECEPTIONHANDLERMONITORFORDATAERRORC+str(e))
                    self.returnReceivedData(clientInformation, b'')
                    break
            return 1
        except Exception as e:
            self.logger.error(loggingConstants.CLIENTRECEPTIONHANDLERMONITORFORDATAERRORD+str(e))
            self.returnReceivedData(clientInformation, b'')

    def returnReceivedData(self, clientInformation, data):
        try:
            from model.RawCoT import RawCoT
            RawCoT = RawCoT()
            #print(data)
            RawCoT.clientInformation = clientInformation
            RawCoT.xmlString = data
            self.dataArray.append(RawCoT)

        except Exception as e:
            self.logger.error(loggingConstants.CLIENTRECEPTIONHANDLERRETURNRECEIVEDDATAERROR+str(e))