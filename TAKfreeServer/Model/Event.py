import uuid
import datetime as dt
from TAKfreeServer.Model.point import COTPoint as 
class Event:
 
 

# Event.py
# Python implementation of the Class Event
# represents a TAK event: this class is instantiated with a standard set of
#    values.
# Generated by Enterprise Architect
# Created on: 11-Feb-2020 11:08:07 AM
# Original author: Corvo
#

# event as an XML
#<?xml version="1.0" encoding="UTF-8" standalone="yes"?><event version="2.0" uid="Linux-ABC.server-ping" type="b-t-f" time="2020-02-14T20:32:31.444Z" start="2020-02-14T20:32:31.444Z" stale="2020-02-15T20:32:31.444Z" how="h-g-i-g-o">

# xml header
xmlheader = "<?xml version='1.0' encoding='UTF-8' standalone='yes'?>"
# basic event
XMLEvent = "<event version='2.0' uid='deccf9b1-ee37-4205-a235-a6d527fc7c24' type='a-f-G-I' time='{0}' start='{0}' stale='{1}' how='h-g-i-g-o'>"
# Gives a hint about how the coordinates were generated
how = "m-g" 

# Schema version of this event instance (e.g.  2.0)
version = "2.0" 
    
 # time stamp: when the event was generated
time = "%Y-%m-%dT%H:%M:%SZ" 
 
    # Hierarchically organized hint about event type (defaultis is 'a-f-G-I'
    # for infrastructure)
type = "a-f-G-I" 
 
    # ending time when an event should no longer be considered valid
stale = "%Y-%m-%dT%H:%M:%SZ" 
  
    # Globally unique name for this information on this event can have
    # additional information attached.
 # e.g.  -ping means that this request is a ping
uid = "UIDString"
# flag to determin e if this event is a Ping, in this case append to the UID
PINGSUFFIX = "-ping"
isPing = 0

GEOCHATPREFIX = "GeoChat."
# flag to determin e if this event is a geo chcat if so, will be added as a
# prefix to the uid
isGeochat = 0
 
    # starting time when an event should be considered valid
Start = "%Y-%m-%dT%H:%M:%SZ" 
     
    #default constructor
def __init__(self):
    setuid
    timer = dt.datetime
    now = timer.utcnow()
    zulu = now.strftime(DATETIME_FMT)
    stale_part = now.minute + 1
    if stale_part > 59:
        stale_part = stale_part - 60
        stale_now = now.replace(minute=stale_part)
        stale = stale_now.strftime(DATETIME_FMT)
    settime(zulu)
    setStart(zulu)
    setstale(stale)
    return XMLEvent

def setXMLEvent():
    XMLEvent = "<event version='2.0' uid='" + uid + "' type='" + type + "' time='" + time + "' start='" + start + "' stale='" + stale + "' how='" + how + "'>"
    XMLEvent = xmlheader + XMLEvent + m_point.getXMLPoint() 

    #Start getter
def getStart(self): 
      return self.Start 
 
     # Start setter
def setStart(Start=0):  
     self.Start = Start 
     
          # m_point getter
def getm_point(self):
         return self.m_point 
 
     # m_point setter
def setm_point(m_point=0):  
        self.m_point = m_point

          # m_detail getter
def getm_detail(self): 
        return self.m_detail 
 
     # m_detail setter
def setm_detail(m_detail=0):  
        self.m_detail = m_detail

        # how getter
def gethow(self): 
      return self.how 
 
     
  # how setter
def sethow(how=0):  
        self.how = how 

    # uid getter
def getuid(self): 
      return self.uid 
 
     # uid setter
def setuid(uid=0):  
     a = uuid.uuid1()
     self.uid = str(a)
     if isGeochat == 1:
            uid = GEOCHATPREFIX + uid
            settype('h-g-i-g-o')
     elif isPing == 1:
            uid = uid + PINGSUFFIX
            settype('t-x-c-t')

         # version getter
def getversion(self): 
      return self.version 
 
     # version setter
def setversion(version=0):  
      self.version = version 

           # time getter
def gettime(self): 
      return self.time 
 
     # time setter
def settime(time=0):  
        self.time = time
       
       # stale getter
def getstale(self): 
      return self.stale 
 
     # stale setter
def setstale(stale=0):
         self.stale = stale 
   
        # type getter
def gettype(self): 
      return self.type 
 
     # type setter
def settype(type=0):  
    self.type = type 
 