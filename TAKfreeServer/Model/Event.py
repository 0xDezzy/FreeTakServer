#######################################################
#
# Event.py
# Python implementation of the Class Event
# Generated by Enterprise Architect
# Created on: 11-Feb-2020 11:08:07 AM
# Original author: Corvo
#
#######################################################
import point
import detail

class Event:
    """represents a TAK event: this class is instantiated with a standard set of
    values.
    """


m_point = "point()" 
m_detail = "detail()" 

# Gives a hint about how the coordinates were generated
how = "m-g" 
     
 
# Schema version of this event instance (e.g. 2.0)
version = "2.0" 
    
    # time stamp: when the event was generated
time = "%Y-%m-%dT%H:%M:%SZ" 
 
    # <font color="#008000">Hierarchically organized hint about event type</font>
type = "a-h-G-E-V" 
 
    # ending time when an event should no longer be considered valid
    stale = "%Y-%m-%dT%H:%M:%SZ" 
  
    # Globally unique name for this information on this event
uid = "UIDString"

 
    # starting time when an event  should be considered valid
Start = "%Y-%m-%dT%H:%M:%SZ" 
     
    #default constructor 
    def __init__(self):

    #Start getter 
     def getStart(self): 
      return self.Start 
 
     # Start setter 
     def setStart(Start=0):  
     self.Start = Start 
     
          # m_point getter 
     def getm_point(self):
         return self.m_point 
 
     # m_point setter 
     def setm_point(m_point=0):  
        self.m_point = m_point

          # m_detail getter 
     def getm_detail(self): 
        return self.m_detail 
 
     # m_detail setter 
     def setm_detail(m_detail=0):  
        self.m_detail = m_detail

        # how getter 
     def gethow(self): 
      return self.how 
 
     
  # how setter 
     def sethow(how=0):  
        self.how = how 

    # uid getter 
     def getuid(self): 
      return self.uid 
 
     # uid setter 
     def setuid(uid=0):  
        self.uid = uid 

         # version getter 
     def getversion(self): 
      return self.version 
 
     # version setter 
     def setversion(version=0):  
      self.version = version 

           # time getter 
     def gettime(self): 
      return self.time 
 
     # time setter 
     def settime(time=0):  
        self.time = time
       
       # stale getter 
     def getstale(self): 
      return self.stale 
 
     # stale setter 
     def setstale(stale=0):
         self.stale = stale 
   
        # type getter 
     def gettype(self): 
      return self.type 
 
     # type setter 
     def settype(type=0):  
     self.type = type 
 